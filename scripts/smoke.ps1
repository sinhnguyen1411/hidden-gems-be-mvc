#Requires -Version 5.1
Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

param(
  [string]$BaseUrl = $env:BASE_URL
)

function Write-Step($msg) { Write-Host "`n=== $msg ===" -ForegroundColor Cyan }
function Write-Ok($msg)   { Write-Host "[OK] $msg" -ForegroundColor Green }
function Write-Fail($msg) { Write-Host "[FAIL] $msg" -ForegroundColor Red }

if (-not $BaseUrl) { $BaseUrl = 'http://127.0.0.1:8000' }
Write-Host "Using BASE: $BaseUrl"

function Invoke-Api {
  param(
    [ValidateSet('GET','POST','PATCH','DELETE')][string]$Method,
    [string]$Path,
    [hashtable]$Body,
    [string]$Token
  )
  $uri = "$BaseUrl$Path"
  $headers = @{}
  if ($Token) { $headers['Authorization'] = "Bearer $Token" }
  if ($Method -eq 'GET' -or -not $Body) {
    $resp = Invoke-WebRequest -Uri $uri -Method $Method -Headers $headers
  } else {
    $json = ($Body | ConvertTo-Json -Depth 6)
    $resp = Invoke-WebRequest -Uri $uri -Method $Method -Headers $headers -ContentType 'application/json' -Body $json
  }
  $obj = $null
  if ($resp.Content) { try { $obj = $resp.Content | ConvertFrom-Json } catch {} }
  return [pscustomobject]@{ StatusCode=$resp.StatusCode; Body=$obj; Raw=$resp }
}

try {
  Write-Step 'Health check /'
  $root = Invoke-Api -Method GET -Path '/'
  if ($root.StatusCode -ne 200 -or $root.Body.message -ne 'Hidden Gems API') { throw "Health check failed: $($root.Raw.StatusCode)" }
  Write-Ok 'Root is healthy'

  Write-Step 'Admin login'
  $adminLogin = Invoke-Api -Method POST -Path '/api/auth/login' -Body @{ email='admin@example.com'; password='admin123' }
  $ADMIN = $adminLogin.Body
  if (-not $ADMIN.access_token) { throw 'Admin login failed' }
  $ADMIN_TOKEN = $ADMIN.access_token
  Write-Ok 'Admin logged in'

  Write-Step 'Set user #2 role to shop'
  $role = Invoke-Api -Method POST -Path '/api/admin/users/role' -Token $ADMIN_TOKEN -Body @{ id_user=2; role='shop' }
  if ($role.StatusCode -notin 200,201) { throw 'Set role failed' }
  Write-Ok 'User #2 is now shop'

  Write-Step 'Shop (user #2) login'
  $shopLogin = Invoke-Api -Method POST -Path '/api/auth/login' -Body @{ email='alice@example.com'; password='secret123' }
  $SHOP = $shopLogin.Body
  if (-not $SHOP.access_token) { throw 'Shop login failed' }
  $SHOP_TOKEN = $SHOP.access_token
  Write-Ok 'Shop logged in'

  Write-Step 'Credit wallet for user #2 (simulate bank)'
  $deposit = Invoke-Api -Method POST -Path '/api/simulate/bank-transfer' -Body @{ noi_dung='HG NAP 2'; so_tien=10.00 }
  if ($deposit.StatusCode -notin 200,201) { throw 'Deposit failed' }
  Write-Ok "Deposited: $($deposit.Body.so_du)"

  Write-Step 'Ensure shop has at least one store'
  $mine = Invoke-Api -Method GET -Path '/api/me/stores' -Token $SHOP_TOKEN
  $storeId = $null
  if ($mine.Body.data.items.Count -gt 0) {
    $storeId = [int]$mine.Body.data.items[0].id_cua_hang
  } else {
    $created = Invoke-Api -Method POST -Path '/api/stores' -Token $SHOP_TOKEN -Body @{ ten_cua_hang='Smoke Test Store'; mo_ta='Auto-generated by smoke.ps1' }
    if ($created.StatusCode -notin 200,201) { throw 'Create store failed' }
    $storeId = [int]$created.Body.id_cua_hang
  }
  if (-not $storeId) { throw 'No store id resolved' }
  Write-Ok "Using store #$storeId"

  $tomorrow = (Get-Date).AddDays(1).ToString('yyyy-MM-dd')

  Write-Step 'Create ad request (shop)'
  $ad = Invoke-Api -Method POST -Path '/api/ads/requests' -Token $SHOP_TOKEN -Body @{ id_cua_hang=$storeId; goi='1d'; ngay_bat_dau=$tomorrow }
  if ($ad.StatusCode -notin 200,201) { throw 'Ad request failed' }
  $adId = [int]$ad.Body.id_yeu_cau
  Write-Ok "Ad request #$adId created"

  Write-Step 'Approve ad request (admin)'
  $adApprove = Invoke-Api -Method POST -Path "/api/admin/ads/requests/$adId/review" -Token $ADMIN_TOKEN -Body @{ trang_thai='da_duyet' }
  if ($adApprove.StatusCode -notin 200) { throw 'Ad approve failed' }
  Write-Ok 'Ad approved'

  Write-Step 'Create promotion (admin)'
  $end = (Get-Date).AddDays(30).ToString('yyyy-MM-dd')
  $promo = Invoke-Api -Method POST -Path '/api/promotions' -Token $ADMIN_TOKEN -Body @{ ten_chuong_trinh='Smoke Promo'; mo_ta='Promo for smoke test'; ngay_bat_dau=$tomorrow; ngay_ket_thuc=$end }
  if ($promo.StatusCode -notin 200,201) { throw 'Create promo failed' }
  $promoId = [int]$promo.Body.id_khuyen_mai
  Write-Ok "Promotion #$promoId created"

  Write-Step 'Shop applies promotion to store'
  $apply = Invoke-Api -Method POST -Path "/api/promotions/$promoId/apply" -Token $SHOP_TOKEN -Body @{ id_cua_hang=$storeId }
  if ($apply.StatusCode -notin 200,201) { throw 'Apply promo failed' }
  Write-Ok 'Promotion applied (pending)'

  Write-Step 'Admin reviews promotion application'
  $review = Invoke-Api -Method POST -Path "/api/promotions/$promoId/review" -Token $ADMIN_TOKEN -Body @{ id_cua_hang=$storeId; trang_thai='da_duyet' }
  if ($review.StatusCode -notin 200) { throw 'Review promo failed' }
  Write-Ok 'Promotion approved'

  Write-Step 'Create + assign voucher (admin)'
  $code = 'SMOKE' + (Get-Random -Minimum 10000 -Maximum 99999)
  $v = Invoke-Api -Method POST -Path '/api/vouchers' -Token $ADMIN_TOKEN -Body @{ ma_voucher=$code; ten_voucher='Smoke Voucher'; gia_tri_giam=10; loai_giam_gia='percent'; so_luong_con_lai=100 }
  if ($v.StatusCode -notin 200,201) { throw 'Create voucher failed' }
  $voucherId = [int]$v.Body.id_voucher
  $assign = Invoke-Api -Method POST -Path '/api/vouchers/assign' -Token $ADMIN_TOKEN -Body @{ id_voucher=$voucherId; id_cua_hang=$storeId }
  if ($assign.StatusCode -notin 200) { throw 'Assign voucher failed' }
  Write-Ok "Voucher #$voucherId assigned to store #$storeId"

  Write-Step 'Blog create/update (admin)'
  $blog = Invoke-Api -Method POST -Path '/api/blog' -Token $ADMIN_TOKEN -Body @{ tieu_de='Smoke Blog'; noi_dung='This is a smoke test blog post.' }
  if ($blog.StatusCode -notin 200,201) { throw 'Create blog failed' }
  $blogId = [int]$blog.Body.id_blog
  $blogU = Invoke-Api -Method PATCH -Path "/api/blog/$blogId" -Token $ADMIN_TOKEN -Body @{ tieu_de='Smoke Blog (edited)'; noi_dung='Updated content' }
  if ($blogU.StatusCode -notin 200) { throw 'Update blog failed' }
  Write-Ok "Blog #$blogId created + updated"

  Write-Step 'Banner create/list (admin)'
  $banner = Invoke-Api -Method POST -Path '/api/banners' -Token $ADMIN_TOKEN -Body @{ tieu_de='Smoke Banner'; url_anh='https://via.placeholder.com/300x100'; vi_tri='home_top'; thu_tu=0; active=1 }
  if ($banner.StatusCode -notin 200,201) { throw 'Create banner failed' }
  $banners = Invoke-Api -Method GET -Path '/api/banners'
  if ($banners.StatusCode -ne 200) { throw 'List banners failed' }
  Write-Ok "Banners listed: $($banners.Body.data.Count)"

  Write-Step 'Chat: shop -> admin'
  $msg = Invoke-Api -Method POST -Path '/api/chat/send' -Token $SHOP_TOKEN -Body @{ noi_dung='Hello admin (smoke test)' }
  if ($msg.StatusCode -notin 200,201) { throw 'Send chat failed' }
  $msgs = Invoke-Api -Method GET -Path '/api/chat/messages' -Token $SHOP_TOKEN
  if ($msgs.StatusCode -ne 200) { throw 'List messages failed' }
  Write-Ok "Messages received: $($msgs.Body.data.Count)"

  Write-Step 'Cafes: list + review (shop)'
  $cafes = Invoke-Api -Method GET -Path '/api/cafes'
  if ($cafes.StatusCode -ne 200 -or $cafes.Body.data.items.Count -eq 0) { throw 'List cafes failed' }
  $cafeId = [int]$cafes.Body.data.items[0].id_cua_hang
  $rev = Invoke-Api -Method POST -Path "/api/cafes/$cafeId/reviews" -Token $SHOP_TOKEN -Body @{ rating=5; content='Tuyet voi (smoke test)' }
  if ($rev.StatusCode -notin 200,201 -and $rev.StatusCode -ne 409 -and $rev.StatusCode -ne 422) { throw 'Create review failed' }
  Write-Ok "Reviewed cafe #$cafeId"

  Write-Step 'Wallet (shop)'
  $bal = Invoke-Api -Method GET -Path '/api/me/wallet' -Token $SHOP_TOKEN
  $hist = Invoke-Api -Method GET -Path '/api/me/wallet/history' -Token $SHOP_TOKEN
  if ($bal.StatusCode -ne 200 -or $hist.StatusCode -ne 200) { throw 'Wallet endpoints failed' }
  Write-Ok "Wallet OK. Balance: $($bal.Body.data.so_du)"

  Write-Step 'Admin dashboard'
  $dash = Invoke-Api -Method GET -Path '/api/admin/dashboard' -Token $ADMIN_TOKEN
  if ($dash.StatusCode -ne 200) { throw 'Dashboard failed' }
  Write-Ok ("Dashboard: " + ($dash.Body.data | ConvertTo-Json -Compress))

  Write-Step 'Global search'
  $search = Invoke-Api -Method GET -Path '/api/search?q=Hidden'
  if ($search.StatusCode -ne 200) { throw 'Search failed' }
  Write-Ok 'Search OK'

  Write-Step 'CSRF token (optional)'
  $csrf = Invoke-Api -Method GET -Path '/api/csrf-token'
  if ($csrf.StatusCode -eq 200) { Write-Ok 'CSRF token issued' } else { Write-Ok 'CSRF endpoint unavailable (disabled)' }

  Write-Host "`nAll smoke tests completed successfully." -ForegroundColor Green
}
catch {
  Write-Fail $_
  exit 1
}

